/*
author: Kirill Koshaev aka codevarius 06.04.2018
 */
package core;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;

public class Graph extends HashMap<Integer,Article> {
    /*
    class to store & manage graph vertex
     */
    private static Integer opt;
    private ArrayList<Article> sortedResultList;
    private String tg;

    public Graph(){
        sortedResultList = new ArrayList<Article>();
    }

    public void sortIndividual(String tag, String artHash ){
        sortedResultList = new ArrayList<>();
        tg = tag;
        search(Integer.valueOf(artHash).hashCode(), tag);
    }

    public void sort(String tag){
        sortedResultList = new ArrayList<>();
        tg = tag;
        search(Main.entranceArticleName.hashCode(), tag);
    }

    private void search(int artHash, String tag) {
        /*
        by deep search alg find articles with selected tag
         */

        if (this.containsKey(artHash)){

            if (this.get(artHash).tags.containsKey(tag.hashCode())){
                sortedResultList.add(this.get(artHash));

                //bug test info
                //System.out.print("searching --> tag found --> list: ");
                //System.out.println(sortedResultList);

                for(Map.Entry<Integer, String> entry : this.get(artHash).parentArticles.entrySet()){
                    Integer k = entry.getKey();
                    if (this.containsKey(k))
                        search(k,tag);
                }
            }else{
                //bug test info
                //System.out.print("searching --> tag not found --> list: ");
                //System.out.println(sortedResultList);

                for(Map.Entry<Integer, String> entry : this.get(artHash).parentArticles.entrySet()){
                    Integer k = entry.getKey();
                    if (this.containsKey(k))
                        search(k,tag);
                }
            }

        }
    }

    public void printSortList(int option) {
        /*
        prints search result sorted by selected rating
         */
        int i = 0;
        Graph.opt = option;
        String r = "default";

        switch (option){
            case 1: r = "rating"; break;
            case 2: r = "views"; break;
            case 3: r = "saves"; break;
        }

        sortedResultList.sort(new Comparator<Article>() {
            public int compare(Article o1, Article o2) {
                switch (Graph.opt){
                    case 1:
                        return Integer.valueOf(o1.getRating()).compareTo(Integer.valueOf(o2.getRating()));

                    case 2:
                        return Integer.valueOf(o1.getViews()).compareTo(Integer.valueOf(o2.getViews()));

                    case 3:
                        return Integer.valueOf(o1.getSaves()).compareTo(Integer.valueOf(o2.getSaves()));

                    default:
                        return 0;
                }

            }
        });

        System.out.println("\nOUTPUT sorted by: " + r + " and generated by tag: " + tg + " -->");
        System.out.println(Main.BORDER);

        for (Article value : sortedResultList
             ) {
            System.out.println(String.format("%4d: {\n       hash: %d\n       name: %s\n       date: %s\n       %s  " +
                            "\n       %s\n       rating: %s\n       views: %s\n       sav: %s\n      }",
                    i++,
                    value.getArticleName().hashCode(),
                    value.getArticleName() + " " + value.getArticleLink(),
                    value.getPublicDate(),
                    value.getTagVals(),
                    value.getRelatives(),
                    value.getRating(),
                    value.getViews(),
                    value.getSaves()));
        }
        System.out.print("\nreport completed --> sorted by: " + r + " and generated by tag: " + tg + " -->");
        System.out.print("\narticles found: " + i + " -->\n");
    }
}
